#include <stdio.h>
#include <stdlib.h>

#define MAX_MEM_SIZE 1000

struct process {
    int pid;
    int size;
    int allocated;
};

void best_fit(struct process *processes, int num_processes, int *memory_blocks, int num_blocks) {
    int i, j, best_index;
    for (i = 0; i < num_processes; i++) {
        best_index = -1;
        for (j = 0; j < num_blocks; j++) {
            if (memory_blocks[j] >= processes[i].size && processes[i].allocated == 0) {
                if (best_index == -1 || memory_blocks[j] < memory_blocks[best_index]) {
                    best_index = j;
                }
            }
        }
        if (best_index != -1) {
            processes[i].allocated = 1;
            memory_blocks[best_index] -= processes[i].size;
            printf("Process %d allocated to block %d\n", processes[i].pid, best_index);
        } else {
            printf("Process %d cannot be allocated\n", processes[i].pid);
        }
    }
}
int main() {
    int num_processes, num_blocks, i;
    struct process *processes;
    int *memory_blocks;

    printf("Enter the number of processes: ");
    scanf("%d", &num_processes);
    processes = (struct process *)malloc(num_processes * sizeof(struct process));

    printf("Enter the sizes of the processes:\n");
    for (i = 0; i < num_processes; i++) {
        processes[i].pid = i;
        scanf("%d", &processes[i].size);
        processes[i].allocated = 0;
    }

    printf("Enter the number of memory blocks: ");
    scanf("%d", &num_blocks);
    memory_blocks = (int *)malloc(num_blocks * sizeof(int));
    printf("Enter the sizes of the memory blocks:\n");
    for (i = 0; i < num_blocks; i++) {
        scanf("%d", &memory_blocks[i]);
    }

    best_fit(processes, num_processes, memory_blocks, num_blocks);

    free(processes);
    free(memory_blocks);
    return 0;
